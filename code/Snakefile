#Snakefile
#
#This file will run the threeprimeseq pipeline from fastq files including assembling reference genome
#
#To configure the paths to data files and other settings, edit
#config_proc.yaml
#
#to configure job submission settings for cluster, edit
#cluster.json and submit-snakemake.sh

#to run on RCC midway2 use 'bash submit-snakemake.sh'

import glob
import os
from snakemake.utils import R

#Configuration -------------------------------------


configfile: "config.yaml"

#picard files:
ref_flat = config["ref_flat"]
ribosome_int = config["ribosome_intervals"]


#chrom length:
chrom_length= config["chrom_lenght"]
#vcf file
vcfFile=config["file_vcf"]
#chromoder:
chromorder= config["file_chromorder"]
#file_genomeFA
genomeFA= config["file_genomeFA"]

#Paths for data (end with forward slash)
dir_proj= config["dir_proj"]
dir_gen=config["dir_genome"]
dir_data= dir_proj + "data/"
output= dir_proj + "output/"
picard= output + "picard/"
fastq_dir= dir_data + "fastq/"
fastqc_dir = output + "fastqc/"
bam_dir= dir_data + "bam/"
sort_dir= dir_data + "sort/"
bam_waspfilt= dir_data + "bam_waspfilt/"
sort_waspfilt_dir= dir_data + "sort_waspfilter/"
bed_waspfilt_dir =dir_data + "bed_waspfilter/"
bedsort_waspfilt_dir=dir_data + "bedsort_waspfilter/"
bed10up_dir = dir_data + "bed_10up/"
nuc10up_dir = dir_data + "nuc_10up/"
nuc10up_clean_dir= dir_data + "nuc_10upclean/"
bedClean_dir = dir_data + "bed_clean/"
bedClean_sort_dir = dir_data + "bed_clean_sort/"
bamclean_dir = dir_data + "bam_clean/"
bamclean_sort_dir= dir_data + "sort_clean/"
bw_dir= dir_data + "bw_norm/"


assert os.path.exists(dir_proj), "Project directory exists"

#Directory to send logi files. Needs to be created manually since it
#is not a file created by a Snakemake rule.
dir_log = config["dir_log"]
if not os.path.isdir(dir_log):
     os.mkdir(dir_log)



samples = set(glob_wildcards(fastq_dir + "{samples}.fastq").samples)


rule all:
#fill in after making rules
    input:
       expand(fastqc_dir + "{samples}_fastqc.html", samples = samples),
       expand(bam_dir + "{samples}.bam", samples = samples),
       expand(sort_dir + "{samples}-sort.bam", samples=samples),
       expand(sort_dir + "{samples}-sort.bam.bai", samples=samples),
       expand(bam_waspfilt + "{samples}-waspfilt.bam", samples=samples),
       expand(sort_waspfilt_dir + "{samples}-waspfilt.sort.bam", samples=samples),
       expand(sort_waspfilt_dir + "{samples}-waspfilt.sort.bam.bai", samples=samples),
       expand(bed_waspfilt_dir + "{samples}-waspfilt.bed", samples=samples),
       expand(bedsort_waspfilt_dir + "{samples}-waspfilt.sort.bed", samples=samples),
       expand(bed10up_dir + "{samples}-10up.bed", samples=samples),
       expand(nuc10up_dir + "{samples}-10upnuc.txt", samples=samples),
       expand(nuc10up_clean_dir + "{samples}-10upnuc.clean.txt", samples=samples),
       expand(bedClean_dir + "{samples}-clean.bed", samples=samples),
       expand(bedClean_sort_dir+ "{samples}-clean-sort.bed", samples=samples),
       expand(bamclean_dir+ "{samples}-clean.bam", samples=samples),
       expand(bamclean_sort_dir + "{samples}-clean.sort.bam", samples=samples),
       expand(bamclean_sort_dir + "{samples}-clean.sort.bam.bai", samples=samples),
       expand(bw_dir + "{samples}-RPKM.bw", samples=samples)





rule fastqc:
    input:
        fastq_dir + "{samples}.fastq"
    output:
        fastqc_dir + "{samples}_fastqc.html",
        fastqc_dir + "{samples}_fastqc.zip"
    params:
        outdir = fastqc_dir
    shell:
        "fastqc -o {params.outdir} {input}"

rule starmap:
    input:
        fastq_dir + "{samples}.fastq"
    output:
        bam_dir + "{samples}.bam"
    params:
        genome= dir_gen,
        vcf= vcfFile,
        outpath= bam_dir + "{samples}"
    shell:
        "STAR --runThreadN 4 --genomeDir {params.genome} --readFilesIn {input}  --outSAMstrandField intronMotif --outFileNamePrefix {output} --outSAMtype BAM Unsorted --varVCFfile {params.vcf}  --waspOutputMode SAMtag --outSAMattributes vA vG> {output}"

rule sort_bam:
    input:
        bam_dir + "{samples}.bam"
    output:
        sort_dir + "{samples}-sort.bam"
    shell: "samtools sort -o {output} -O bam {input}Aligned.out.bam"

rule index_bam:
    input:
        sort_dir + "{samples}-sort.bam"
    output:
        sort_dir + "{samples}-sort.bam.bai"
    shell: "samtools index {input}"

rule filter_wasp:
    input:
        sort_dir +  "{samples}-sort.bam"
    output:
        bam_waspfilt + "{samples}-waspfilt.bam"
    shell: "python filterBamBasedonWasp_general.py {input} {output}"

rule sort_waspfilterbam:
    input:
        bam_waspfilt + "{samples}-waspfilt.bam"
    output:
        sort_waspfilt_dir + "{samples}-waspfilt.sort.bam"
    shell: "samtools sort -o {output} -O bam {input}"

rule index_waspfilterbam:
    input:
       sort_waspfilt_dir + "{samples}-waspfilt.sort.bam"
    output:
       sort_waspfilt_dir + "{samples}-waspfilt.sort.bam.bai"
    shell: "samtools index {input}"

rule bam2bed:
    input:
       sort_waspfilt_dir + "{samples}-waspfilt.sort.bam"
    output:
        bed_waspfilt_dir + "{samples}-waspfilt.bed"
    shell: "bedtools bamtobed -i {input} > {output}"

rule sortbed:
    input:
        bed_waspfilt_dir + "{samples}-waspfilt.bed"
    output:
        bedsort_waspfilt_dir + "{samples}-waspfilt.sort.bed"
    shell: "sort -k1,1 -k2,2n {input} > {output}"

rule get10up:
    input:
        bedsort_waspfilt_dir + "{samples}-waspfilt.sort.bed"
    output:
        bed10up_dir + "{samples}-10up.bed"
    shell: "python Upstream10Bases_general.py {input} {output}"


rule nuc10up:
    input:
       bed10up_dir + "{samples}-10up.bed"
    output:
       nuc10up_dir + "{samples}-10upnuc.txt"
    params:
       genomeFA
    shell: "bedtools nuc -s -seq -fi {params} -bed {input} > {output}"

rule clean10up:
    input:
       nuc10up_dir + "{samples}-10upnuc.txt"
    output:
       nuc10up_clean_dir + "{samples}-10upnuc.clean.txt"
    shell: "python filterMissprimingInNuc10_gen.py {input} {output}"

rule cleanBedfile:
    input:
       bedfile= bedsort_waspfilt_dir + "{samples}-waspfilt.sort.bed",
       cleanfile= nuc10up_clean_dir + "{samples}-10upnuc.clean.txt"
    output:
       bedClean_dir + "{samples}-clean.bed"
    shell: "Rscript --vanilla filterSortBedbyCleanedBed_gen.R {input.bedfile} {input.cleanfile} {output}"

rule sortcleanbed:
    input:
       bedClean_dir + "{samples}-clean.bed"
    output:
       bedClean_sort_dir + "{samples}-clean-sort.bed"
    params:
       chromorder
    shell: "bedtools sort -faidx {params} -i {input} > {output}"


rule cleanBam:
    input:
       bedfile= bedClean_sort_dir + "{samples}-clean-sort.bed",
       bamfile= sort_waspfilt_dir + "{samples}-waspfilt.sort.bam"
    output:
       bamclean_dir + "{samples}-clean.bam"
    shell: "python filterBamforMP.pysam2_gen.py {input.bedfile} {input.bamfile} {output}"


rule sort_cleanBam:
    input:
       bamclean_dir + "{samples}-clean.bam"
    output:
       bamclean_sort_dir + "{samples}-clean.sort.bam"
    shell: "samtools sort -o {output} -O bam {input}"

rule index_cleanBam:
    input:
       bamclean_sort_dir + "{samples}-clean.sort.bam"
    output:
       bamclean_sort_dir + "{samples}-clean.sort.bam.bai"
    shell: "samtools index {input} > {output}"

rule bam2bw:
    input:
       bamclean_sort_dir + "{samples}-clean.sort.bam"
    output:
       bw_dir + "{samples}-RPKM.bw"
    shell: "bamCoverage -b {input} -o {output} -of 'bigwig' --normalizeUsingRPKM"
